

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, CONST, CLASS, IF, ELSE, WHILE, BREAK, CONTINUE, NEW;
terminal PRINT, READ, RETURN, VOID, EXTENDS, FOREACH;
terminal TRUE, FALSE;
terminal CHAR;
terminal Integer NUMBER;
terminal String IDENT;
terminal PLUS, MINUS, MULTIPLY, DIVISION, MOD;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal AND, OR, INC, DEC, ASSIGN;
terminal SEMI, DOUBLE_DOT, COMMA, DOT;
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal POINTER_LIKE;

nonterminal Program, DeclList, DeclItem, MethodDeclList; 
nonterminal ConstDeclList, ConstDecl, Const, ConstVal; 
nonterminal VarDeclList, VarDecl, Var, VarVal, Type, MethodDecl;
nonterminal FormPars, FormalParamList, FormalParamDecl, StatementList, Statement;
nonterminal Designator, Expr, Term, Assignop, Addop, Mulop, Factor;
nonterminal DesignatorStatement, DesignatorList, NumConstList;

Program ::= (Program) PROG IDENT DeclList LBRACE MethodDeclList RBRACE;

DeclList ::= (AllDeclarations) DeclItem DeclList 
			|
			(NoDeclarations) /* epsilon */
			;

DeclItem ::= (ConstDeclList) ConstDeclList
			|
			(VarDeclList) VarDeclList
			;

ConstDeclList ::= (ConstDeclarations) ConstDecl ConstDeclList 
			|
			(NoConstDecl) /* epsilon */
			;
			
ConstDecl ::= (ConstDecl) CONST Type:constType Const SEMI;

Const ::= (SingleConst) IDENT:constName ASSIGN ConstVal
		|
		(MultipleConst) Const COMMA IDENT:constName ASSIGN ConstVal
		;

ConstVal ::= (IntVal) NUMBER
		|
		(CharVal) CHAR /* TODO i u flex CHAR */
		|
		(TrueVal) TRUE
		|
		(FalseVal) FALSE
		;

VarDeclList ::= (VarDeclarations) VarDecl VarDeclList 
			|
			(NoVarDecl) /* epsilon */
			;

VarDecl ::= (VarDecl) Type:varType Var SEMI;

Var ::= (SingleVar) VarVal
		|
		(MultipleVar) Var COMMA VarVal /* Proveri ako mozes na obrnut nacin da zapises */
		;

VarVal ::= (VarNoBrackets) IDENT:varName 
		|
		(VarBrackets) IDENT:varName LBRACKET RBRACKET
		;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (RetMethodDecl) Type:retType IDENT:methName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE
			|
			(VoidMethodDecl) VOID IDENT:methName LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE
			;

FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
				|
				(SingleFormalParamDecl) FormalParamDecl
				;
				
FormalParamDecl ::= (FormalParamBrackets) Type:formType IDENT:formName LBRACKET RBRACKET
					|
					(FormalParamNoBrackets) Type:formType IDENT:formName
					;

Type ::= (Type) IDENT:typeName;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;

Statement ::= (DesignatorStmt) DesignatorStatement SEMI
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		   |
		   (ReadStmt) READ LPAREN Designator RPAREN SEMI
		   |
		   (PrintStmt) PRINT LPAREN Expr NumConstList RPAREN SEMI
		   |
		   (BracketsStms) LBRACKET Statement RBRACKET
		   ;

NumConstList ::= (NumConsts) NumConstList COMMA NUMBER
				|
				(NoNumConsts) /* epsilon */

DesignatorStatement ::= (DesignatorAssign) Designator Assignop Expr
					|
					(DesignatorINC)Designator INC
					|
					(DesignatorDEC)Designator DEC
					|
					(DesignatorBrackets) LBRACKET DesignatorList RBRACKET ASSIGN Designator
					;
					
DesignatorList ::= (DesignatorLists) Designator COMMA DesignatorList
				|
				(NoDesignatorList) /* epsilon */
				;

Expr ::= (NegativeExpr) MINUS Term Addop Term
		|
		(PositiveExpr) Term Addop Term
		|
		(SignleExpr) Term
		;

Term ::= (TermExpr) Factor:t0 MulOp Factor:t1
		|
		(SignleTerm) Factor:t0
		;
				
Factor ::=(DisgnatorNoPars) Designator:d
		|
		(NumConst) NUMBER
		|
		(CharConst) CHAR
		|
		(TrueConst) TRUE
		|
		(FalseConst) False
		|
		(NewFuncExpr) NEW Type:typeName LBRACKET Expr RBRACKET
		|
		(Expresion) LPAREN Expr RPAREN
		;

Designator ::= (DesignatorNoBrackets) IDENT:name IDENT:expr
			|
			(DesignatorBrackets) IDENT:name LBRACKET Expr RBRACKET
			;

Assignop ::= (Assignop) ASSIGN;


Addop ::= (Addop) PLUS
		|
		(Minusop) MINUS
		;
		
Mulop ::= (Mulop) MULTIPLY
		|
		(Divisonop) DIVISION
		|
		(Modop) MOD
		;
