

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, CONST, CLASS, IF, ELSE, WHILE, BREAK, CONTINUE, NEW;
terminal PRINT, READ, RETURN, VOID, EXTENDS, FOREACH;
terminal TRUE, FALSE;
terminal CHAR;
terminal Integer NUMBER;
terminal String IDENT;
terminal PLUS, MINUS, MULTIPLY, DIVISION, MOD;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal AND, OR, INC, DEC, ASSIGN;
terminal SEMI, DOUBLE_DOT, COMMA, DOT;
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;
terminal POINTER_LIKE;

nonterminal Program, ParamList, ParamItem, MethodDeclList; 
nonterminal ConstDecl, ConstDeclList, Const, ConstVal, ConstComma, ConstSemi; 
nonterminal VarDeclList, VarDecl, VarSemi, VarComma, Var, Type, MethodDecl, MethodVarDecl;
nonterminal StatementList, Statement;
nonterminal Designator, Expr, Term, Assignop, Addop, Mulop, Factor;
nonterminal DesignatorStatement, DesignatorList, DesignatorTemp, NumConstList;

Program ::= (Program) PROG IDENT ParamList LBRACE MethodDeclList RBRACE;

ParamList ::= (ParamItemList) ParamList ParamItem
			|
			(NoParamItem)
			;
			
ParamItem ::= (ParamConstList) ConstDecl
			|
			(ParamVarList) VarDecl; 

ConstDecl ::= (ConstDeclaration) CONST Type:constType ConstDeclList;

ConstDeclList ::= (ConstList) ConstComma ConstDeclList
				|
				(SingleConst) ConstSemi
				;
						
ConstSemi ::= (SemiConst) Const SEMI
			|
			(ConstSemiError) error SEMI:l
			{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
			;
	
ConstComma ::= (CommaConst) Const COMMA
			|
			(ConstCommaError) error COMMA:l
			{: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :}
			;
				
Const ::= (Const) IDENT:constName ASSIGN ConstVal;
			
ConstVal ::= (NumConst) NUMBER
			|
			(CharConst) CHAR
			|
			(TrueConst) TRUE
			|
			(FalseConst) FALSE
			;

MethodVarDecl ::= (MethodVarDecls) MethodVarDecl VarDecl
		|
		(NoMethodVarDecls)
		;

VarDecl ::= (VarDeclaration) Type:varType VarDeclList;

VarDeclList ::= (VarList) VarComma VarDeclList
				|
				(SingleVar) VarSemi
				;
				
VarComma ::= (CommaVar) Var COMMA
			|
			(VarCommaError) error COMMA:l
			{: parser.report_error("Izvrsen oporavak do , u liniji " + lleft, null);  :}
			;

VarSemi ::= (SemiVar) Var SEMI
			|
			(VarSemiError) error SEMI:l
			{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
			;
			
Var ::= (VarNoBrackets) IDENT:varName
		|
		(VarBrackets) IDENT:varName LBRACKET RBRACKET
			;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl /* mozda nepotrebno */
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (VoidMethodDecl) VOID IDENT:methName LPAREN RPAREN MethodVarDecl LBRACE StatementList RBRACE;

Type ::= (Type) IDENT:typeName;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;

Statement ::= (DesignatorStmt) DesignatorStatement SEMI
		   |
		   (ReadStmt) READ LPAREN Designator RPAREN SEMI
		   |
		   (PrintStmt) PRINT LPAREN Expr NumConstList RPAREN SEMI
		   ;
		   
NumConstList ::= (NumConsts) NumConstList COMMA NUMBER
				|
				(NoNumConsts) /* epsilon */
				;

DesignatorStatement ::= (DesignatorAssign) Designator Assignop Expr
					|
					(DesignatorINC)Designator INC
					|
					(DesignatorDEC)Designator DEC
					|
					(DesignatorStatementBrackets) LBRACKET DesignatorList RBRACKET ASSIGN Designator
					|
					(DesignatorStatementError) error SEMI:l
		   			{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
					;

DesignatorTemp ::= (DesignatroTemp) Designator
				|
				(NoDesignatroTemp)
				;
				
DesignatorList ::= (DesignatorLists) DesignatorList COMMA DesignatorTemp
				|
				(SingleDesignatorList) DesignatorTemp
				;		

Expr ::= (NegativeExpr) MINUS Term Addop Expr
		|
		(PositiveExpr) Term Addop Expr
		|
		(SingleExpr) Term
		|
		(SingleNegativeExpr) MINUS Term
		;

Term ::= (TermExpr) Factor:t0 Mulop Term:t1
		|
		(SignleTerm) Factor:t0
		;
				
Factor ::=(DisgnatorNoPars) Designator:d
		|
		(NumFactorConst) NUMBER
		|
		(CharFactorConst) CHAR
		|
		(TrueFactorConst) TRUE
		|
		(FalseFactorConst) FALSE
		|
		(NewFuncExpr) NEW Type:typeName LBRACKET Expr RBRACKET
		|
		(Expression) LPAREN Expr RPAREN
		;

Designator ::= (DesignatorNoBrackets) IDENT:name
			|
			(DesignatorBrackets) IDENT:name LBRACKET Expr RBRACKET 
			;
	
Assignop ::= (Assignop) ASSIGN;

Addop ::= (Addop) PLUS
		|
		(Minusop) MINUS
		;
		
Mulop ::= (Mulop) MULTIPLY
		|
		(Divop) DIVISION
		|
		(Modop) MOD
		;
			